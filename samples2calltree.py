#!/usr/bin/python

import sys
import os
import time

from sample_reader import parseFile


outFd = None

def handleEvent (e):
    #print e

    outFd.write("# event at %s\n" % ( time.strftime('%c', time.localtime(e[0]) ) ) )

    # NumSamples
    frames = []
    knownFunctions = {}

    currFrame = 1
    for f in e[1]:
        #if f[2] is not None:
        funcName = f[2]
        if funcName is None:
            if f[1] == '[vdso]':
                funcName = '_vdso_'
            else:
                funcName = '_unknown_0x%08x' % f[0]
        lineNo = f[4]
        if lineNo is None: lineNo = 0
        fileName = f[3]
        if fileName is None:
            if f[1]:
                fileName = "_in_lib_%s" % f[1]
            else:
                fileName = ''

        # simple cycle detection
        if not(knownFunctions.has_key(funcName)):
            knownFunctions[funcName] = 1
        else:
            knownFunctions[funcName] += 1

        if knownFunctions[funcName] > 1:
            funcName += "'%d" % knownFunctions[funcName]

        frames.append( (f[0], f[1], funcName, fileName, lineNo) )

        if currFrame == 1:
            outFd.write("fl=%s\n" % fileName)
            outFd.write("fn=%s\n" % funcName)
            outFd.write("%d %d\n" % (lineNo, 1))
        currFrame += 1

    # function calls
    outFd.write("# function calls\n")
    currFrame = 1
    for f in frames[1:]:
        if f[2] is not None:
            prevFrame = frames[ currFrame-1 ]
            
            if prevFrame[2] is not None:
                lineNo = f[4]
                prevLineNo = prevFrame[4]

                outFd.write("fl=%s\n" % f[3])
                outFd.write("fn=%s\n" % f[2])
                outFd.write("cfl=%s\n" % prevFrame[3])
                outFd.write("cfn=%s\n" % prevFrame[2])
                outFd.write("calls=1 %d\n" % prevLineNo)
                outFd.write("%d 1\n" % lineNo)
                
            
            #outFd.write("%d 0 %d\n" % (f[4], 1))
        currFrame += 1

    outFd.write("\n")

    #sys.exit(1)

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print "Usage: %s <sample data file>" % sys.argv[0]
        sys.exit(1)

    sampleFile = sys.argv[1]

    outFd = open("calltree.%s" % os.path.basename(sampleFile), "w")

    outFd.write("# callgrind output file, generated by '%s'\n" % sys.argv)
    outFd.write("events: NumSamples\n")
    outFd.write("\n")

    parseFile(sampleFile, handleEvent)

